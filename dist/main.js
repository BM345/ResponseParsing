!function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(r,s,function(e){return t[e]}.bind(null,s));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){var r=i(1);function s(t,e){return t.split("").filter(t=>t==e).length>0}class n{constructor(){this.position=0}copy(){var t=new n;return t.position=this.position,t}}class a{constructor(){this.removeLeadingZerosFromSimplifiedForms=!1,this.addLeadingZeroToDecimalsForSimplifiedForms=!0}}class o{constructor(){this.settings=new a,this.simplifier=new r.Simplifier}getParseResult(t){var e=new n,i=this.parseExpression(t,e);return null!==i&&e.position==t.length?((i=this.simplifier.simplifyNode(i)).setDepth(),i):null}anyAt(t,e,i){for(var r=0;r<t.length;r++){var s=t[r];if(e.substring(i.position,i.position+s.length)==s)return s}return!1}parseExpression(t,e){for(var i,s=[],n=[],a=0;e.position<t.length;){var o=this.parseBinomialOperator(t,e.copy());if(null===o&&(o=this.parseBracketedExpression(t,e.copy())),null===o&&(o=this.parseFactorial(t,e.copy())),null===o&&(o=this.parseMixedFraction(t,e.copy())),null===o&&(o=this.parseFraction(t,e.copy())),null===o&&(o=this.parseNamedFunction(t,e.copy())),null===o&&(o=this.parseSquareRoot(t,e.copy())),null===o&&(o=this.parseNumber(t,e.copy())),null===o&&(o=this.parseIdentifier(t,e.copy())),null===o&&(o=this.parseWhiteSpace(t,e.copy())),null===o)break;if("operator"==o.type||"namedFunction"==o.type)this._applyOperators(s,n,o),n.push(o),a++;else if("whiteSpace"==o.type);else{if(void 0!==i&&"operator"!=i.type&&"namedFunction"!=i.type){var p=new r.RPOperatorNode;p._text="*",p.isImplicit=!0,n.push(p)}else if(1==a&&"operator"==i.type&&("+"==i.value||"-"==i.value)){var u=new r.RPUnaryOperationNode;u.operator=n.pop(),u.operand=o,o=u}s.push(o),a++}e.position+=o.length,"whiteSpace"!=o.type&&(i=o)}return this._applyOperators(s,n,null),1==s.length?s[0]:null}_applyOperators(t,e,i){for(var s=e.length-1;s>=0&&(null===i||e[s].precedence>=i.precedence);s--)if(t.length>=1){var n,a=e.pop();if(t.length>=2&&"operator"==a.type)"+"==a.text&&(n=new r.RPAdditionNode),"-"==a.text&&(n=new r.RPSubtractionNode),"*"==a.text&&(n=new r.RPMultiplicationNode),"/"==a.text&&(n=new r.RPDivisionNode),"^"==a.text&&(n=new r.RPExponentiationNode),n.operand2=t.pop(),n.operand1=t.pop(),"*"==a.text&&a.isImplicit?(n.isImplicit=!0,n._text=n.operand1.text+n.operand2.text):n._text=n.operand1.text+a.text+n.operand2.text,t.push(n);else if(t.length>=1&&"operator"==a.type){"!"==a.text&&(n=new r.RPFactorialNode);var o=t.pop();n.operand=o,n._text=o.text+a.text,t.push(n)}else if(t.length>=1&&"namedFunction"==a.type){n=a;o=t.pop();n.parameters.push(o),n._text+=o.text,t.push(n)}}}parseFactorial(t,e){var i=e.position;if("!"!=t.charAt(e.position))return null;e.position++;var s=e.position,n=new r.RPOperatorNode;return n.start=i,n.end=s,n._text="!",n.value="!",n}parseBracketedExpression(t,e){var i=e.position;if("("!=t.charAt(e.position))return null;e.position++;for(var s=1,a="";e.position<t.length&&s>0;){var o=t.charAt(e.position);a+=o,"("==o?s++:")"==o&&s--,e.position++}var p=e.position,u=new r.RPBracketedExpressionNode;if(u.start=i,u.end=p,u._text=a,p-i>=2){var l=t.substring(i+1,p-1),h=this.parseExpression(l,new n);u.innerExpression=h}return u}parseNamedFunction(t,e){var i=e.position,s="",n=null;if(r.namedFunctions.forEach(i=>{i.allowedWritings.map(t=>t).sort((t,e)=>e.length-t.length).forEach(r=>{t.substr(e.position,r.length)==r&&(n=i,s=r,e.position+=r.length)})}),null===n)return null;var a=e.position,o=new r.RPNamedFunctionNode;return o.value=n,o.start=i,o.end=a,o._text=s,o}parseBinomialOperator(t,e){var i=e.position,n=t.charAt(e.position);if(!s("+-*/^",n))return null;e.position++;var a=e.position,o=new r.RPOperatorNode;return o.start=i,o.end=a,o._text=n,o.value=n,o}parseIdentifier(t,e){var i=e.position,n=t.charAt(e.position);if(!s("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",n))return null;e.position++;var a=e.position,o=new r.RPIdentifierNode;return o.start=i,o.end=a,o._text=n,o.value=n,o}parseSquareRoot(t,e){var i=e.position,s=this.anyAt(["sqrt","squareroot","root"],t,e);if(!1===s)return null;e.position+=s.length;this.parseWhiteSpace(t,e);var n=this.parseNumber(t,e.copy());if(null===n&&(n=this.parseIdentifier(t,e.copy())),null===n&&(n=this.parseBracketedExpression(t,e.copy())),null===n)return null;e.position+=n.length;var a=e.position,o=new r.RPRadicalNode;return o.start=i,o.end=a,o._text=t.slice(i,a),o.radix=2,o.radixIsImplicit=!0,o.radicand=n,o}parseMixedFraction(t,e){var i=e.position,s=this.parseNumber(t,e);if(null===s)return null;if(null===this.parseWhiteSpace(t,e))return null;var n=this.parseFraction(t,e);if(null===n)return null;var a=e.position,o=new r.RPMixedFractionNode;return o.start=i,o.end=a,o._text=t.slice(i,a),o.wholePart=s,o.fractionPart=n,o}parseFraction(t,e){var i=e.position,s=this.parseNumber(t,e);if(null===s)return null;this.parseWhiteSpace(t,e);if("/"!==t.charAt(e.position))return null;e.position+=1;this.parseWhiteSpace(t,e);var n=this.parseNumber(t,e),a=e.position,o=new r.RPFractionNode;return o.start=i,o.end=a,o._text=t.slice(i,a),o.numerator=s,o.denominator=n,o}parseNumber(t,e){var i="",n=e.position,a="",o="",p="",u="positive",l=!1,h=t.charAt(e.position);"+"==h?(p="+",l=!0,e.position++):"-"==h&&(p="-",u="negative",l=!0,e.position++);for(var c=0,d=0,x=0,m=0,g=0,f=0;e.position<t.length;){var y=t.charAt(e.position);if(s("0123456789",y))i+=y,e.position++,0==f?a+=y:(o+=y,m++),"0"==y&&0==x&&0==f?c++:"0"!=y?(x+=g,g=0,x++):"0"==y&&x>0&&g++;else{if("."!=y)break;if(0!=f)break;i+=y,e.position++,o+=y,f++}}var b=0==x&&i.length>0;b&&(u="zero");var v=0,M=0;b?(v=1,M=1,f>0&&(d=m)):f>0?(v=x+g,M=x+g,d=g):(v=x,M=x+g);var P=e.position,N=0==f?"integer":"decimalNumber",_="";""!=a||""!=o&&"."!=o?""==a?_=this.settings.addLeadingZeroToDecimalsForSimplifiedForms?"0":"":this.settings.removeLeadingZerosFromSimplifiedForms?(_=a.slice(c),this.settings.addLeadingZeroToDecimalsForSimplifiedForms&&(_=""==_?"0":_)):_=a:_="";var E="."==o?"":o,R=b?_+E:p+_+E;if(p+i=="")return null;var w=new r.RPNumberNode;return w.subtype=N,w.integralPart=a,w.decimalPart=o,w.start=n,w.end=P,w._text=p+i,w.value=R,w.sign=u,w.signIsExplicit=l,w.numberOfLeadingZeros=c,w.numberOfTrailingZeros=d,w.minimumNumberOfSignificantFigures=v,w.maximumNumberOfSignificantFigures=M,w.numberOfDecimalPlaces=m,w}parseWhiteSpace(t,e){for(var i="",n=e.position;e.position<t.length;){var a=t.charAt(e.position);if(!s(" \t\n",a))break;i+=a,e.position+=1}var o=e.position;if(""==i)return null;var p=new r.RPWhiteSpaceNode;return p.start=n,p.end=o,p._text=i,p.value=" ",p._latex=i,p._asciiMath=i,p}}t.exports.Marker=n,t.exports.ResponseParser=o},function(t,e){class i{constructor(t=""){this.supernode=null,this.depth=0,this.type=t,this.subtype="",this._title="Node",this.start=0,this.end=0,this._text="",this._latex="",this._asciiMath="",this._mathML=""}get title(){return this._title}get length(){return this.end-this.start}get text(){return this._text}get latex(){return this._latex}get asciiMath(){return this._asciiMath}get mathML(){return this._mathML}get subnodes(){return[]}setDepth(t=0){this.depth=t;var e=this;this.subnodes.forEach(i=>{i.supernode=e,i.setDepth(t+1)})}}class r extends i{constructor(){super("unaryOperation"),this.operand=null,this.operator=null}get subnodes(){return[this.operand]}}class s extends i{constructor(){super("binaryOperation"),this.operand1=null,this.operand2=null,this.operator=null,this._title="BinaryOperation"}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.operand1.isEqualTo(this.operand1)&&t.operand2.isEqualTo(this.operand2)}get subnodes(){return[this.operand1,this.operand2]}}class n{constructor(t="",e=[],i="",r="",s=""){this.name=t,this.allowedWritings=e,this.latex=i,this.asciiMath=r,this.mathML=s}}var a=[new n("Sine",["sin","sine"],"\\sin","sin"),new n("Cosine",["cos","cosine"],"\\cos","cos"),new n("Tangent",["tan","tangent"],"\\tan","tan"),new n("Arcsine",["asin","arcsin","arcsine"],"\\arcsin","arcsin"),new n("Arccosine",["acos","arccos","arccosine"],"\\arccos","arccos"),new n("Arctangent",["atan","arctan","arctangent"],"\\arctan","arctan")];class o extends i{constructor(){super("surd"),this.coefficient=null,this.radical=null,this._title="Surd"}get subnodes(){return[this.coefficient,this.radical]}get latex(){return this.coefficient.latex+" "+this.radical.latex}get asciiMath(){return this.coefficient.asciiMath+" "+this.radical.asciiMath}}class p extends i{constructor(){super("summation"),this.operands=[],this._title="Summation"}get subnodes(){return this.operands}get latex(){return this.operands.map(t=>t.latex).join("+")}get asciiMath(){return this.operands.map(t=>t.asciiMath).join("+")}}t.exports.RPNode=i,t.exports.RPWhiteSpaceNode=class extends i{constructor(){super("whiteSpace"),this.value=""}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.value===this.value}},t.exports.RPNumberNode=class extends i{constructor(){super("number"),this._title="Number",this.value="",this.integralPart="",this.decimalPart="",this.sign="",this.signIsExplicit=!1,this.numberOfLeadingZeros=0,this.numberOfTrailingZeros=0,this.minimumNumberOfSignificantFigures=0,this.maximumNumberOfSignificantFigures=0,this.numberOfDecimalPlaces=0}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.value===this.value}get title(){return"integer"==this.subtype?"Integer":"Decimal Number"}get latex(){return this.value}get asciiMath(){return this.value}get mathML(){return"<mn>"+this.value+"</mn>"}},t.exports.RPFractionNode=class extends i{constructor(){super("fraction"),this._title="Fraction",this.numerator=null,this.denominator=null}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.numerator.isEqualTo(this.numerator)&&t.denominator.isEqualTo(this.denominator)}get subnodes(){return[this.numerator,this.denominator]}get latex(){return"\\frac{"+this.numerator.latex+"}{"+this.denominator.latex+"}"}get asciiMath(){return"frac "+this.numerator.asciiMath+" "+this.denominator.asciiMath}get mathML(){return"<mfrac>"+this.numerator.mathML+this.denominator.mathML+"</mfrac>"}},t.exports.RPMixedFractionNode=class extends i{constructor(){super("mixedFraction"),this._title="Mixed Fraction",this.wholePart=null,this.fractionPart=null}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.wholePart.isEqualTo(this.wholePart)&&t.fractionPart.isEqualTo(this.fractionPart)}get subnodes(){return[this.wholePart,this.fractionPart]}get latex(){return this.wholePart.latex+" "+this.fractionPart.latex}get asciiMath(){return this.wholePart.asciiMath+" "+this.fractionPart.asciiMath}get mathML(){return this.wholePart.mathML+this.fractionPart.mathML}},t.exports.RPRadicalNode=class extends i{constructor(){super("radical"),this.radix=2,this.radixIsImplicit=!0,this.radicand=null}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.radix===this.radix&&t.radicand.isEqualTo(this.radicand)}get subnodes(){return[this.radicand]}get title(){return 2==this.radix?"Square Root":3==this.radix?"Cube Root":"Radical"}get latex(){return"\\sqrt{"+this.radicand.latex+"}"}get asciiMath(){return"sqrt("+this.radicand.asciiMath+")"}get mathML(){return 2==this.radix?"<msqrt>"+this.radicand.mathML+"</msqrt>":"<mroot>"+this.radicand.mathML+"<mn>"+this.radix+"</mn></mroot>"}},t.exports.RPIdentifierNode=class extends i{constructor(){super("identifier"),this.value="",this._title="Identifier"}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.value===this.value}get latex(){return this.value}get asciiMath(){return this.value}get mathML(){return"<mi>"+this.value+"</mi>"}},t.exports.RPOperatorNode=class extends i{constructor(){super("operator"),this.value="",this._title="Operator",this.isImplicit=!1}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.value===this.value}get precedence(){return"+-*/^!=".indexOf(this.value)}get latex(){return"*"==this.value?"\\times":this.value}get asciiMath(){return this.value}get mathML(){return"<mo>"+this.value+"</mo>"}},t.exports.RPUnaryOperationNode=r,t.exports.RPFactorialNode=class extends r{constructor(){super(),this.subtype="factorial",this._title="Factorial"}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.operand.isEqualTo(this.operand)}get latex(){return this.operand.latex+"!"}get asciiMath(){return this.operand.asciiMath+"!"}},t.exports.RPBinaryOperationNode=s,t.exports.RPAdditionNode=class extends s{constructor(){super(),this.subtype="addition",this._title="Addition"}get latex(){return this.operand1.latex+"+"+this.operand2.latex}get asciiMath(){return this.operand1.asciiMath+"+"+this.operand2.asciiMath}},t.exports.RPSubtractionNode=class extends s{constructor(){super(),this.subtype="subtraction",this._title="Subtraction"}get latex(){return this.operand1.latex+"-"+this.operand2.latex}get asciiMath(){return this.operand1.asciiMath+"-"+this.operand2.asciiMath}},t.exports.RPMultiplicationNode=class extends s{constructor(){super(),this.subtype="multiplication",this.isImplicit=!1,this._title="Multiplication"}get title(){return this.isImplicit,"Multiplication"}get latex(){return this.isImplicit?this.operand1.latex+this.operand2.latex:this.operand1.latex+" \\times "+this.operand2.latex}get asciiMath(){return this.isImplicit?this.operand1.asciiMath+this.operand2.asciiMath:this.operand1.asciiMath+"*"+this.operand2.asciiMath}},t.exports.RPDivisionNode=class extends s{constructor(){super(),this.subtype="division",this._title="Division"}get latex(){return this.operand1.latex+"/"+this.operand2.latex}get asciiMath(){return this.operand1.asciiMath+"/"+this.operand2.asciiMath}},t.exports.RPExponentiationNode=class extends s{constructor(){super(),this.subtype="exponentiation",this._title="Exponentiation"}get latex(){return this.operand1.latex+"^{"+this.operand2.latex+"}"}get asciiMath(){return this.operand1.asciiMath+"^"+this.operand2.asciiMath}},t.exports.RPNamedFunction=n,t.exports.namedFunctions=a,t.exports.RPNamedFunctionNode=class extends i{constructor(){super("namedFunction"),this.value=null,this.parameters=[],this.precedence=6}get title(){return null===this.value?"Named Function":this.value.name+" Function"}get subnodes(){return this.parameters}get latex(){return this.value.latex+" "+this.parameters.map(t=>t.latex).join(", ")}get asciiMath(){return this.value.asciiMath+" "+this.parameters.map(t=>t.asciiMath).join(", ")}},t.exports.RPBracketedExpressionNode=class extends i{constructor(){super("bracketedExpression"),this.bracketType="()",this.innerExpression=null,this._title="Bracketed Expression"}isEqualTo(t){return t.type===this.type&&t.subtype===this.subtype&&t.bracketType==this.bracketType&&t.innerExpression.isEqualTo(this.innerExpression)}get subnodes(){return[this.innerExpression]}get text(){return"("+this.innerExpression.text+")"}get latex(){return"\\left("+this.innerExpression.latex+"\\right)"}get asciiMath(){return"("+this.innerExpression.asciiMath+")"}},t.exports.RPSurdNode=o,t.exports.RPSummationNode=p,t.exports.Simplifier=class{constructor(){}simplifyNode(t){return t=this.replaceWithSurd(t),t=this.replaceWithSummation(t),t=this.replaceWithSummation(t)}replaceWithSummation(t){if("addition"==t.subtype&&("addition"==t.operand1.subtype||"addition"==t.operand2.subtype)){var e=new p;return"addition"==t.operand1.subtype?(e.operands.push(t.operand1.operand1),e.operands.push(t.operand1.operand2)):e.operands.push(t.operand1),"addition"==t.operand2.subtype?(e.operands.push(t.operand2.operand1),e.operands.push(t.operand2.operand2)):e.operands.push(t.operand2),e}if("summation"==t.type){e=new p;return t.operands.forEach(t=>{"addition"==t.subtype?(e.operands.push(t.operand1),e.operands.push(t.operand2)):e.operands.push(t)}),e}return t}replaceWithSurd(t){if("binaryOperation"==t.type&&"multiplication"==t.subtype&&"number"==t.operand1.type&&"radical"==t.operand2.type&&("number"==t.operand2.radicand.type||"bracketedExpression"==t.operand2.radicand.type&&"number"==t.operand2.radicand.innerExpression.type)){var e=new o;return e.coefficient=t.operand1,e.radical=t.operand2,e}return t}}}]);